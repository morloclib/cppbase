module cppbase {

-- generic serialization functions
source Cpp from "serial.hpp" ("pack", "unpack")

-- required machinery for C++ interoperability
source Cpp from "interop.hpp" ("foreign_call")

export enumerateWith
export fold
export map
export zipWith
export add
export sub
export mul
export div
export mod

source Cpp from "core.hpp" (
  -- arithmetic
    "morloc_add" as add
  , "morloc_sub" as sub
  , "morloc_mul" as mul
  , "morloc_div" as div
  , "morloc_mod" as mod
  -- higher order functions
  , "morloc_map" as map
  , "morloc_zipWith" as zipWith
  , "morloc_fold" as fold
  , "morloc_enumerateWith" as enumerateWith
)

-- foo :: Int -> Table {a :: Int, b :: Str}
-- foo cpp :: int -> Table {b as "brian" :: "std::string", a :: int}
-- -- The order can differ from the general type and field names can be replaced

-- tuple functions
fst      :: (a, b) -> a ;
snd      :: (a, b) -> b;
tuple    :: a -> b -> (a, b);
couple   :: (a -> b) -> a -> (b, a);
with_sec :: (b -> c) -> (a, b) -> (a, c);
with_fst :: (a -> c) -> (a, b) -> (c, b);
curry    :: ((a, b) -> c) -> a -> b -> c;
uncurry  :: (a -> b -> c) -> (a, b) -> c;

-- pairlists
zip   :: [a] -> [b] -> [(a, b)];
unzip :: [(a, b)] -> ([a], [b]);
keys  :: [(a, b)] -> [a];
vals  :: [(a, b)] -> [b];

-- functions over pairlists
filter_key :: (a -> Bool)  -> [(a, b)] -> [(a, b)];
filter_val :: (a -> Bool)  -> [(b, a)] -> [(b, a)];
map_key    :: (a -> b)     -> [(a, c)] -> [(b, c)];
map_val    :: (a -> b)     -> [(c, a)] -> [(c, b)];
with_keys  :: ([a] -> [b]) -> [(a, c)] -> [(b, c)];
with_vals  :: ([a] -> [b]) -> [(c, a)] -> [(c, b)];

-- -- Laws
-- with_vals id xs == xs
-- with_keys id xs == xs
-- map_val id xs == xs
-- map_key id xs == xs
-- filter_val true xs == xs
-- filter_val false xs == []
-- filter_key true xs == xs
-- filter_key false xs == []

context_filter_key :: (a -> b -> (a, Bool)) -> a -> [(b,c)] -> [(b,c)];
context_filter_val :: (a -> b -> (a, Bool)) -> a -> [(c,b)] -> [(c,b)];

-- functional tools
flip  :: (a -> b -> c) -> b -> a -> c;
until :: (a -> Bool) -> (a -> a) -> a -> a;

-- foldable functions - replace once I get typeclasses working
length    :: [a] -> Int;
reverse   :: [a] -> [a];
concat    :: [[a]] -> [a];
concatMap :: (a -> [b]) -> [a] -> [b];

-- list creation
replicate :: Int -> a -> [a];

-- general list processing
head :: [a] -> a;        -- [1,2,3] => 1
last :: [a] -> a;        -- [1,2,3] => 3
tail :: [a] -> [a];      -- [1,2,3] => [2,3]
init :: [a] -> [a];      -- [1,2,3] => [1,2]
get  :: Int -> [a] -> a; -- get 1 [1,2,3] => 2
take :: Int -> [a] -> [a];
drop :: Int -> [a] -> [a];
takeWhile :: (a -> Bool) -> [a] -> [a];
dropWhile :: (a -> Bool) -> [a] -> [a];
span      :: (a -> Bool) -> [a] -> ([a], [a]);
break     :: (a -> Bool) -> [a] -> ([a], [a]);
splitAt   :: Int -> [a] -> ([a], [a]);

-- string processing
lines   :: Str -> [Str];
words   :: Str -> [Str];
unlines :: [Str] -> Str;
unwords :: [Str] -> Str;

-- accumulating folds
scanl  :: (b -> a -> b) -> b -> [a] -> [b];
scanr  :: (a -> b -> b) -> b -> [a] -> [b];
scanl1 :: (a -> a -> a) -> [a] -> [a];
scanr1 :: (a -> a -> a) -> [a] -> [a];


-- NOTE: After a system for numeric casting is added to morloc, replace the
-- concrete arithmetic operators below with qualified types, e.g.:
--    add :: Num -> Num -> Num
--    add Cpp :: a -> a -> a
-- Or maybe
--    add Cpp :: a -> b -> c
-- So this is complicated ... if the two inputs to add can be of different
-- types, say int and double, then what is the return type? For add, the return
-- type would need to be decided based on a function of the input types. But these
-- types will depend on the function. I will need to research this problem ...
--
-- As a temporary measure, I will leave the types as "double". On the C++ side
-- in core.hpp, they are all implemented as fully generalized templates of three
-- independent types.

-- arithmetic operators - these are all
-- add :: (Num a) => a -> a -> a;
add :: Num -> Num -> Num;
add Cpp :: "double" -> "double" -> "double";

-- sub :: (Num a) => a -> a -> a;
sub :: Num -> Num -> Num;
sub Cpp :: "double" -> "double" -> "double";

-- mul :: (Num a) => a -> a -> a;
mul :: Num -> Num -> Num;
mul Cpp :: "double" -> "double" -> "double";

-- div :: (Num a) => a -> a -> a;
div :: Num -> Num -> Num;
div Cpp :: "double" -> "double" -> "double";

-- mod :: (Num a) => a -> a -> a;
div :: Num -> Num -> Num;
mod Cpp :: "double" -> "double" -> "double";


map :: (a -> b) -> [a] -> [b];
map Cpp :: (a -> b) -> "std::vector<$1>" a
                    -> "std::vector<$1>" b;

zipWith     :: (a -> b -> c) -> [a] -> [b] -> [c];
zipWith Cpp :: (a -> b -> c) -> "std::vector<$1>" a
                             -> "std::vector<$1>" b
                             -> "std::vector<$1>" c;

fold     :: (b -> a -> b) -> b -> [a] -> b;
fold Cpp :: (b -> a -> b) -> b -> "std::vector<$1>" a -> b;

enumerateWith     :: (a -> Int -> b) -> [a] -> [b]; 
enumerateWith Cpp :: (a -> "int" -> b) -> "std::vector<$1>" a
                                       -> "std::vector<$1>" b;

}
