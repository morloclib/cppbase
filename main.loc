module cppbase (*)

import conventions

source Cpp from "core.hpp"
 ( "morloc_run" as run
 , "morloc_id" as id
 -- arithmetic
 , "morloc_add" as add
 , "morloc_sub" as sub
 , "morloc_mul" as mul
 , "morloc_div" as div
 , "morloc_neg" as neg
 , "morloc_mod" as mod
 -- higher order functions
 , "morloc_at" as at
 , "morloc_map" as map
 , "morloc_append" as append
 , "morloc_zipWith" as zipWith
 , "morloc_fold" as fold
 , "morloc_enumerateWith" as enumerateWith
 -- combinators
 , "morloc_seq" as seq
 , "morloc_const" as const
 -- tuples
 , "morloc_fst" as fst
 , "morloc_snd" as snd
 , "morloc_fst3" as fst3
 , "morloc_snd3" as snd3
 , "morloc_thr3" as thr3
 -- pair-list functions
 , "morloc_zip" as zip
 , "morloc_unzip" as unzip
 , "morloc_keys" as keys
 , "morloc_vals" as vals
 , "morloc_filter_key" as filterKey
 , "morloc_filter_val" as filterVal
 , "morloc_map_key" as mapKey
 , "morloc_map_val" as mapVal
 , "morloc_with_fsts" as withFsts
 , "morloc_with_snds" as withSnds
 , "morloc_join" as join
 -- new functions for the paper case study
 , "morloc_unique" as unique
 , "morloc_ifelse" as ifelse
 , "morloc_head" as head
 , "morloc_filter" as filter
 , "morloc_length" as length
 , "morloc_length" as lengthS
 -- comparators
 , "morloc_gt" as gt
 , "morloc_lt" as lt
 , "morloc_ge" as ge
 , "morloc_le" as le
 , "morloc_eq" as eq
 , "morloc_ne" as ne
 , "morloc_not" as not
 , "morloc_and" as and
 , "morloc_or" as or
 )

-------------------------------------------------------------------------------
--                 Pack and Unpack internal functions
-- These functions are used by morloc internally for (de)serialization of types
-- that cannot be automatically (de)serialized into/from JSON. They should not
-- be exported.
-------------------------------------------------------------------------------

source Cpp from "data.hpp"
 ( "morloc_packMap" as packMap
 , "morloc_unpackMap" as unpackMap
 , "morloc_packUnit" as packUnit
 , "morloc_unpackUnit" as unpackUnit
 )

type Cpp (Map key val) = "std::map<$1,$2>" key val

-- These do not need to be exported (and indeed should not be)
packMap :: pack => ([key],[val]) -> Map key val
packMap Cpp :: pack => ([key],[val]) -> "std::map<$1,$2>" key val

unpackMap :: unpack => Map key val -> ([key],[val])
unpackMap Cpp :: unpack => "std::map<$1,$2>" key val -> ([key],[val])

-- why Int, Unit is the simplest enum, it stores just one value, 0
packUnit :: pack => Int -> Unit
packUnit Cpp :: pack => "int" -> "mlc::Unit"

unpackUnit :: unpack => Unit -> Int
unpackUnit Cpp :: unpack => "mlc::Unit" -> "int"
